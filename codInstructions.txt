DATA [15:0]
OPCODE [15:10]

================================================= INSTRUÇÕES =====================================================

0. nop			:	 0000000000000000															#	NOP
1. add r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= r1 + r2
2. add imm, r2	:	 opcode(15 downto 10), r1(9 downto 7), imm(6 downto 0)						#	r2 <= imm + r2
3. sub r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= r2 - r1
4. and r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= r2 and r1
5. xor r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= r2 xor r1
6. not r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= not(r1)
7. mov imm, r2	:	 opcode(15 downto 10), r2(9 downto 7), imm(6 downto 0)						#	r2 <= imm
8. mov r1, r2	:	 opcode(15 downto 10), r1(9 downto 7), r2(6 downto 4), exc(3 downto 0)		#	r2 <= r1
9. jump imm 	:	 opcode(15 downto 10), imm(9 downto 0)										#	JUMP TO ADDRESS(IMM)

============================================ PROGRAMAS EXECUTADOS ==================================================

# CÓDIGO 1:
ASSEMBLY:						BINÁRIO:				HEX:

1. mov 5, $r3				=> x 	=> x
2. mov 8, $r4				=> x 	=> x
3. add $r3, $r4				=> x 	=> x
4. mov $r4, $r5				=> x	=> x
5. add -1, $r5				=> x	=> x
6. mov $r5, $r3				=> x	=> x
7. jump 3					=> x	=> x 

ROM:
			 0 => "1000000011000101", -- addi $r3, $zero, 5
			 1 => "1000000100001000", -- addi $r4, $zero, 8
			 2 => "0001011100101000", -- add $r5, $r3, $r4, 000 
			 3 => "1000101101111111", -- addi $r5, $r5, -1
			 4 => "1111000000010100", -- jump 000000010100 (address 20)
			 5 => "0000000000000000", 
			 6 => "0000000000000000",  
			 7 => "0000000000000000",  
			 8 => "0000000000000000",  
			 9 => "0000000000000000",  
			 10 => "0000000000000000",
			 11 => "0000000000000000",  
			 12 => "0000000000000000",  
			 13 => "0000000000000000",  
			 14 => "0000000000000000",  
			 15 => "0000000000000000",  
			 16 => "0000000000000000",  
			 17 => "0000000000000000",  
			 18 => "0000000000000000",  
			 19 => "0000000000000000",  
			 20 => "1001100011000000", -- cpy $r3, $r4, 000000
			 21 => "1111000000000011", -- jump 000000000011 (address 3) : LOOP